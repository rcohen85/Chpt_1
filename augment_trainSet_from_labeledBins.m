%% Use labeled bins to identify examples to add to train/test sets to improve
% classifier performance. Look at plots of concatenated spectra to identify 
% mislabeled bins which could actually be used to create new train/test
% types. This script will generate a plot of spectra sorted by peak
% frequency, on which you can choose the bins you want to use by clicking
% the first and last bin of interest on the plot

% directory containing "data" struct file
labDir = 'F:\NFC_A_02\NEW_ClusterBins_120dB\ToClassify\labels2'; 
dataMat = 'NFC_A_02_BinsbyLabel'; % name of file containing "data" struct generated by catCTbins
load(fullfile(labDir,dataMat));

type = 18; % row containing CT of interest in "data" struct

% directory to save file containing "thisType" matrix; if a file with this
% name already exists, selected examples will be added to it; if none
% exists one will be created below
outDir = 'I:\cluster_NNet\Set_w_Combos_HighAmp\Sowerby';
saveName = 'NFC_A_02_Compiled.mat';

%%

[~, maxind] = max(data(type).BinSpecs,[],2);
[B, ind] = sortrows(maxind);

f = 5:0.5:98.5;
figure(1)          % plot spectra sorted by frequency
imagesc([],f,data(type).BinSpecs(ind,:)');
set(gca,'ydir','normal');

binSelect = ginput(2);

subInd = round(binSelect(1,1)):round(binSelect(2,1));

specs = data(type).BinSpecs(ind(subInd),:);
ici = data(type).ICI(ind(subInd),:);
starts = data(type).BinTimes(ind(subInd),:);
env = data(type).Env(ind(subInd),:);
files = data(type).File(ind(subInd),:);

check = exist(fullfile(outDir,saveName),'file');

if check==2
    load(fullfile(outDir,saveName));
    thisType.Tfinal{1,1} = [thisType.Tfinal{1,1};specs];
    thisType.Tfinal{1,2} = [thisType.Tfinal{1,2};ici];
    thisType.Tfinal{1,3} = diff(thisType.Tfinal{1,1},[],2);
    thisType.Tfinal{1,5} = mean(thisType.Tfinal{1,1},1);
    thisType.Tfinal{1,6} = [thisType.Tfinal{1,6};files];
    thisType.Tfinal{1,7} = [thisType.Tfinal{1,7};starts];
    thisType.Tfinal{1,10} = [thisType.Tfinal{1,10};env];
elseif check==0
    thisType = struct('Tfinal',[]);
    thisType.Tfinal{1,1} = specs;
    thisType.Tfinal{1,2} = ici;
    thisType.Tfinal{1,3} = diff(thisType.Tfinal{1,1},[],2);
    thisType.Tfinal{1,5} = mean(thisType.Tfinal{1,1},1);
    thisType.Tfinal{1,6} = files;
    thisType.Tfinal{1,7} = starts;
    thisType.Tfinal{1,10} = env;
end

save(fullfile(outDir,saveName),'thisType','-v7.3');

%%
% 
% cInt = vertcat(binData.cInt);
% goodBins = find(cInt>1);
% 
% specs = vertcat(binData(goodBins).sumSpec);
% ici = vertcat(binData(goodBins).dTT);
% starts = vertcat(binData(goodBins).tInt);
% starts = starts(:,1);
% env = vertcat(binData(goodBins).envMean);
% 
% if exist('thisType','var')==1
%     thisType.Tfinal{1,1} = [thisType.Tfinal{1,1};specs];
%     thisType.Tfinal{1,2} = [thisType.Tfinal{1,2};ici];
%     thisType.Tfinal{1,3} = diff(thisType.Tfinal{1,1},[],2);
%     thisType.Tfinal{1,5} = mean(thisType.Tfinal{1,1},1);
%     thisType.Tfinal{1,7} = [thisType.Tfinal{1,7};starts];
%     thisType.Tfinal{1,10} = [thisType.Tfinal{1,10};env];
% elseif exist('thisType','var')==0
%     thisType = struct('Tfinal',[]);
%     thisType.Tfinal{1,1} = specs;
%     thisType.Tfinal{1,2} = ici;
%     thisType.Tfinal{1,3} = diff(thisType.Tfinal{1,1},[],2);
%     thisType.Tfinal{1,5} = mean(thisType.Tfinal{1,1},1);
%     thisType.Tfinal{1,7} = starts;
%     thisType.Tfinal{1,10} = env;
% end
% 
% outDir = 'I:\cluster_NNet\Set_w_Combos_HighAmp\Gervais';
% saveName = 'Compiled_GoM_MC_GervaisVar.mat';
% save(fullfile(outDir,saveName),'thisType','-v7.3');
% 
% f = 5:0.5:98.5;
% figure;imagesc([],f,vertcat(thisType.Tfinal{1,1})');,set(gca,'ydir','normal');
% meanSpec = mean(vertcat(thisType.Tfinal{1,1}));
% figure;plot(f,meanSpec);xlabel('Freq (kHz)');ylabel('Normalized Amplitude');
% 
