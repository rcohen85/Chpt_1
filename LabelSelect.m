%% Flag spurious bin-level labels for removal before applying to individual 
% clicks (zID_from_bin_clusters). "data" matrix generated by catCTbins
% should be in same directory as _predLab files

labDir = 'I:\HAT_B_01-03\NEW_ClusterBins_120dB\ToClassify\labels2';
clasDir = 'I:\HAT_B_01-03\NEW_ClusterBins_120dB\ToClassify';
suffix = '_clusters_PR95_PPmin120_toClassify.mat';
dataMat = 'HAT_B_01-03_BinsbyLabel'; % name of file containing "data" matrix generated by catCTbins
load(fullfile(labDir,dataMat));

CTs = {'Blainville''s','Boats','CT11','CT2+CT9','CT3+CT7','CT4/6+CT10',...
    'CT5','CT8','Cuvier''s','Gervais''','HFA 15kHz','HFA 50kHz','HFA 70kHz',...
    'Kogia','MFA','MultiFreq Sonar','Risso''s','Sowerby''s','Sperm Whale',...
    'Spiky Sonar','True''s','Wideband Sonar'};
f = 5:0.5:98.5;

%% Plot bins by label, sorted by label confidence (low to high, left to right)
% and ask for user input to determine how to flag labels
% 
% flagMat = struct('CT',[],'BinTimes',[],'Probs',[],'WhichCell',[],'File',[],'Flag',[]);
% N = length(CTs);
% 
% for i = 1:N %for each CT, determine which labels to keep and which to flag
%     
%     probs = vertcat(data(i).Probs);
%     [probs, I] = sortrows(probs);
%     catSpecs = vertcat(data(i).BinSpecs);
%     catSpecs = catSpecs(I,:);
%     ICI = vertcat(data(i).ICI);
%     meanICI = mean(ICI,1);
%     t = 0:.01:1;
%     
%     figure(1)
%     subplot(1,4,1:3)
%     imagesc([],f,catSpecs');
%     set(gca,'ydir','normal');
%     colormap(jet);
%     ylabel('Frequency (kHz)');
%     xlabel('Bin Number');
%     title(CTs{i});
%     set(gca,'fontSize',14);
%     subplot(1,4,4)
%     plot(t,meanICI,'LineWidth',2);
%     grid on
%     xticks([0 0.25 0.5 0.75 1]);
%     xlabel('ICI (s)');
%     ylabel('Normalized Counts');
%     set(gca,'fontSize',14);
%     
%     a = [];
%     b = [];
%     
%     while isempty(a)
%         a = input('Enter 1 to keep all labels, 0 to discard all labels, or 2 to select bins to flag: ');
%     end
%     
%     if a==1 || a==0
%         flagMat(i).CT = data(i).CT;
%         flagMat(i).BinTimes = data(i).BinTimes;
%         flagMat(i).Probs = data(i).Probs;
%         flagMat(i).WhichCell = data(i).WhichCell;
%         flagMat(i).File = data(i).File;
%         if a==1
%             flagMat(i).Flag = repmat(1,size(data(i).BinTimes,1),1);
%         else
%             flagMat(i).Flag = repmat(0,size(data(i).BinTimes,1),1);
%         end
%         
%     elseif a==2
%         b = 1;
%         indVec = [];
%         while b==1
%             c = [];
%             fprintf('Double click single bin or click first and last of a range of bins to flag:\n');
%             binSelect = ginput(2);
%             sorted_ind = round(binSelect(1,1)):round(binSelect(2,1));
%             ind = I(sorted_ind); % go from indices of bins sorted by prob back to indices of bins in "data" matrix
%             [Lia, Locb] = ismember(ind,indVec);
%             if sum(Lia)>=1
%                 fprintf('WARNING: Some or all of the selected bin(s) already have flags which will be overwritten\n');
%                 indVec(Locb) = [];
%                 flagMat(i).BinTimes(Locb) = [];
%                 flagMat(i).Probs(Locb) = [];
%                 flagMat(i).WhichCell(Locb) = [];
%                 flagMat(i).File(Locb) = [];
%                 flagMat(i).Flag(Locb) = [];
%             end
%             indVec = [indVec,ind'];
%             
%             while isempty(c)
%                 c = input('Enter 1 to keep, 0 to discard label(s) for this selection: ');
%             end
%             flagMat(i).CT = data(i).CT;
%             flagMat(i).BinTimes = [flagMat(i).BinTimes; data(i).BinTimes(ind)];
%             flagMat(i).Probs = [flagMat(i).Probs;data(i).Probs(ind)];
%             flagMat(i).WhichCell = [flagMat(i).WhichCell; data(i).WhichCell(ind)];
%             flagMat(i).File = [flagMat(i).File; data(i).File(ind)];
%             if c==1
%                 flagMat(i).Flag = [flagMat(i).Flag; repmat(1,size(data(i).BinTimes(ind),1),1)];
%             elseif c==0
%                 flagMat(i).Flag = [flagMat(i).Flag; repmat(0,size(data(i).BinTimes(ind),1),1)];
%             end
%             b = [];
%             while isempty(b)
%                 b = input('Make another selection? Enter 1 for "yes", 0 for "no": ');
%             end
%         end
%         
%         d = [];
%         while isempty(d)
%             d = input('Keep or discard remaining bin labels for this CT? Enter 1 for "keep", 0 for "discard": ');
%         end
%         
%         remInd = setdiff(1:size(data(i).BinTimes,1),indVec);
%         flagMat(i).BinTimes = [flagMat(i).BinTimes; data(i).BinTimes(remInd)];
%         flagMat(i).Probs = [flagMat(i).Probs;data(i).Probs(remInd)];
%         flagMat(i).WhichCell = [flagMat(i).WhichCell; data(i).WhichCell(remInd)];
%         flagMat(i).File = [flagMat(i).File; data(i).File(remInd)];
%         flagMat(i).Flag = [flagMat(i).Flag; repmat(d,size(remInd,2),1)];
%     end
%     
%     % Put bins back in chronological order
%     [B, sortInd] = sortrows(flagMat(i).BinTimes);
%     flagMat(i).BinTimes = flagMat(i).BinTimes(sortInd);
%     flagMat(i).Probs = flagMat(i).Probs(sortInd);
%     flagMat(i).WhichCell = flagMat(i).WhichCell(sortInd);
%     flagMat(i).File = flagMat(i).File(sortInd);
%     flagMat(i).Flag = flagMat(i).Flag(sortInd);
%     
% end
% 
% save(fullfile(labDir,'FlagMat'),'flagMat','-v7.3');

%% Construct labFlag files corresponding to each predLabels file based on flagMat

% labFiles = dir(fullfile(labDir,'*predLab.mat'));
clasFiles = dir(fullfile(clasDir,'*toClassify.mat'));

times_unsorted = vertcat(flagMat.BinTimes); %times of bins jump from end of file back to start with each species
[times, I] = sortrows(times_unsorted); % put bins back in chronological order
files = vertcat(flagMat.File);
files = files(I);
flags = vertcat(flagMat.Flag);
flag = flags(I);
cells = vertcat(flagMat.WhichCell);
cells = cells(I);

% keep track of which label and associated flag applies to which cell RETAINED in 
% each bin by accounting for spectra discarded by labelThresh in catCTbins
[~, ind, ~] = unique(times);
repeatedInd = setdiff(1:size(times,1),ind);
newCell = zeros(size(times,1),1,1);
newCell(ind) = 1;
a = diff(repeatedInd);
b = find([a inf] > 1);
c = diff([0 b]);
d = cumsum(c);
for i = 1:length(d)
   newCell(repeatedInd(d(i)-c(i)+1:d(i))) = 2:c(i)+1;
end
cells(:,2) = newCell;

for iA = 1:length(clasFiles) %for each toClassify file
    
    load(fullfile(clasDir,clasFiles(iA).name),'sumTimeMat');
    
    % get the name of the file
    stringGrab = clasFiles(iA).name;
    stringGrab = erase(stringGrab,suffix);
    
    % find bin times and corresponding flags for this file
    thisFile = strcmp(files,stringGrab);
    thisFileTimes = times(thisFile);
    thisFileFlags = flags(thisFile);
    thisFileCells = cells(thisFile,2);
    
    % add flags into labFlag matrix of all bin times in this file
    labFlag = sumTimeMat(:,1);
    for iB = 1:length(thisFileTimes) % possible to vectorize this?
       
        q = find(labFlag == thisFileTimes(iB));
        if length(q)==1
            labFlag(q,2) = thisFileFlags(iB);
        else
            thisCell = q(thisFileCells(iB));
            labFlag(thisCell,2) = thisFileFlags(iB);
        end       
    end
        
    saveName = strrep(labFiles(iA).name,'predLab','labFlag');
    save(fullfile(labDir,saveName),'labFlag','-v7.3');

end


